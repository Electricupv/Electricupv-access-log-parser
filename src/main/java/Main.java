import java.util.Scanner;

public class Main {

    //Модуль числа. Дана следующая сигнатура метода:
    //public static int abs(int x);
    //Необходимо реализовать метод таким образом, чтобы он возвращал модуль числа х (если он был положительным, то таким и остается, если он был отрицательным – то необходимо вернуть его без знака минус). При реализации метода не использовать методы класса Math.

    public static int module(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }


    //Безопасное деление. Дана следующая сигнатура метода:
    //public static int safeDiv(int x, int y);
    //Необходимо реализовать метод таким образом, чтобы он возвращал деление x на y, и при этом гарантировал, что не будет выкинута ошибка деления на 0. При делении на 0 следует вернуть из метода число 0. Подсказка: смотри ограничения на операции типов данных.

    public static int safeDiv(int x, int y) {
        if (y == 0) {
            return 0;
        }
        return x / y;
    }

//Максимум. Дана следующая сигнатура метода:
//public static int max(int x, int y);
//Необходимо реализовать метод таким образом, чтобы он возвращал максимальное значение из двух полученных методом чисел. При реализации метода не использовать методы класса Math.

    public static int max(int x, int y) {
        if (x>y) return x;
        return y;
    }

//Строка сравнения. Дана следующая сигнатура метода:
//public static String makeDecision(int x, int y);
//Необходимо реализовать метод таким образом, чтобы он возвращал строку, которая включает два принятых методом числа и корректно выставленный знак операции сравнения (больше, меньше, или равно).

    public static String makeDecision(int x, int y) {
        if (x < y) {
            return x + " < " + y;
        } else if (x > y) {
            return x + " > " + y;
        } else {
            return x + " == " + y;
        }
    }

//Тройной максимум. Дана следующая сигнатура метода:
//public static int max3(int x, int y, int z);
//Необходимо реализовать метод таким образом, чтобы он возвращал максимальное из трех полученных методом чисел. Подсказка: идеальное решение включает всего две инструкции if и не содержит вложенных if. При реализации метода не использовать методы класса Math.

    public static int max3(int x, int y, int z) {
        int max = x;
        if (y > max)
            max = y;
        if (z > max)
            max = z;
        return max;
    }

//ройная сумма. Дана следующая сигнатура метода:
//public static boolean sum3(int x, int y, int z);
//Необходимо реализовать метод таким образом, чтобы он возвращал true, если два любых числа (из трех принятых) можно сложить так, чтобы получить третье.

    public static boolean sum3(int x, int y, int z) {
        return (x + y == z) || (x + z == y) || (y + z == x);
    }

//Двойная сумма. Дана следующая сигнатура метода:
//public static int sum2(int x, int y);
//Необходимо реализовать метод таким образом, чтобы он возвращал сумму чисел x и y. Однако, если сумма попадает в диапазон от [10, 19], то надо вернуть число 20.

    public static int sum2(int x, int y) {
        int sum = x + y;
        if (sum >= 10 && sum <= 19) {
            return 20;
        }
        return sum;
    }

//Тридцать пять. Дана следующая сигнатура метода:
//public static boolean is35(int x);
//Необходимо реализовать метод таким образом, чтобы он возвращал true, если число x делится нацело на 3 или 5. При этом, если оно делится и на 3, и на 5, то вернуть надо false. Подсказка: оператор % позволяет получить остаток от деления.

    public static boolean is35(int x) {
        //возьмем Исключающее ИЛИ (знак ^ читается как XOR)
        return (x % 3 == 0) ^ (x % 5 == 0);
    }

//Волшебная шестерка. Дана следующая сигнатура метода:
//public static boolean magic6(int x, int y);
//Необходимо реализовать метод таким образом, чтобы он возвращал true, если одно из принятых методом чисел равно шести, или их сумма равна шести, или разница между ними равна шести.

    public static boolean magic6(int x, int y) {
        return x == 6
                || y == 6
                || (x + y == 6)
                || (x - y == 6)
                || (y - x == 6);
    }

//Возраст. Дана следующая сигнатура метода:
//public static String age(int x);
//Необходимо реализовать метод таким образом, чтобы он возвращал строку, в которой сначала будет число х, а затем одно из слов:
//год года лет
//Слово “год” добавляется, если число х заканчивается на 1, кроме чисел оканчивающихся на 11.
//Слово “года” добавляется, если число х заканчивается на 2, 3 или 4, кроме чисел оканчивающихся на 12, 13, 14.
//Слово “лет” добавляется во всех остальных случаях.
//Подсказка: оператор % позволяет получить остаток от деления.

    public static String age(int x) {
        int lastDigit = x % 10;
        int lastTwoDigits = x % 100;

        if (lastDigit == 1 && lastTwoDigits != 11) {
            return x + " год";
        } else if ((lastDigit >= 2 && lastDigit <= 4) && !(lastTwoDigits >= 12 && lastTwoDigits <= 14)) {
            return x + " года";
        } else {
            return x + " лет";
        }
    }

//День недели. Дана следующая сигнатура метода:
//public static String day(int x);
//Метод принимает число x, обозначающее день недели. Необходимо реализовать метод таким образом, чтобы он возвращал строку, которая будет обозначать текущий день недели, где 1- это понедельник, а 7 – воскресенье. Если число не от 1 до 7 то верните текст “это не день недели”. Вместо if в данной задаче используйте switch.

    public static String day(int x) {
        switch (x) {
            case 1: return "понедельник";
            case 2: return "вторник";
            case 3: return "среда";
            case 4: return "четверг";
            case 5: return "пятница";
            case 6: return "суббота";
            case 7: return "воскресенье";
            default: return "это не день недели";
        }
    }

//Вывод дней недели. Дана следующая сигнатура метода:
//public static void printDays(String x);
//В качестве параметра метод принимает строку, в которой записано название дня недели. Необходимо реализовать метод таким образом, чтобы он выводил на экран название переданного в него дня и всех последующих до конца недели дней. Если в качестве строки передан не день, то выводится текст “это не день недели”. Первый день понедельник, последний – воскресенье. Вместо if в данной задаче используйте switch.
//Обратите внимание, что делать для каждого из case вывод сразу всех дней (например case “понедельник” sout(“понедельник вторник среда четверг пятница суббота воскресенье”) – решение явно некорректное. Попробуйте применить для решения задачи принцип падения сквозь метки.

    public static void printDays(String x) {
        switch (x) {
            case "понедельник": System.out.println("понедельник");
            case "вторник": System.out.println("вторник");
            case "среда": System.out.println("среда");
            case "четверг": System.out.println("четверг");
            case "пятница": System.out.println("пятница");
            case "суббота": System.out.println("суббота");
            case "воскресенье": System.out.println("воскресенье");
                break;
            default:
                System.out.println("это не день недели");
        }
    }
}




